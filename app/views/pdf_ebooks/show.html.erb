<% provide :page_title, @title || "Title" %>
<%# https://github.com/mlibrary/heliotrope/issues/1228 %>
<% content_for :head do %>
  <meta name="turbolinks-cache-control" content="no-cache">
  <% if @parent_presenter.doi.present? %>
    <script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>
  <% end %>

  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="google" content="notranslate">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">

  <link rel="resource" type="application/l10n" href="/web/locale/locale.properties">

  <script src="/mozilla-pdf-viewer/build/pdf.js"></script>

  <% if defined? @subdomain %>
    <%# only include hypothes.is for leverpress um press and its subpresses at this point %>
    <% if %w[leverpress michigan cjs cseas csas lrccs ummaa].include? @subdomain %>

      <!-- hypothes.is -->
      <script type="text/javascript">
        window.hypothesisConfig = function () {
          return {
            openSidebar: false,
            theme: 'clean', // "clean" or "classic"
            enableMultiFrameSupport: true,
            onLayoutChange: function(state) {
              var $frame = $('.annotator-frame');
              var $reader = $("#reader");
            },
            enableExperimentalNewNoteButton: true
          };
        };
      </script>
      <script src="https://cdn.hypothes.is/hypothesis"></script>
    <% end %>
  <% end %>

<% end %>

<% provide :body do %>
  <% if defined? @presenter.file_set_coins_title %>
    <span class="Z3988" title="<%= @presenter.file_set_coins_title %>" aria-hidden="true"></span>
  <% end %>
  <div class="skip"></div>
  <!-- `role="status"` implies `aria-live="polite"` but redundancy is recommended for maximum compatibility -->
  <!-- see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions -->
  <div id="pdfLoadingProgressBar" role="status" aria-live="polite" aria-atomic="true" class="sr-only"></div>
    <%= tag.div id: 'epub', class: press_presenter.present? ? press_presenter.press_subdomains : '' do %>
      <div id="reader">
        <div id="mainContainer"></div>
      </div>
    <% end %>

    <div id="mozilla-pdf-viewer-ui" style="display: none">
      <div id="sidebarResizer" class="hidden"></div>

      <div class="findbar hidden doorHanger" id="findbar">
        <div id="findbarInputContainer">
          <input id="findInput" class="toolbarField" title="Find" placeholder="Find in document…" tabindex="-1" data-l10n-id="find_input">
          <div class="splitToolbarButton">
            <button id="findPrevious" class="toolbarButton findPrevious" title="Find the previous occurrence of the phrase" tabindex="-1" data-l10n-id="find_previous">
              <span data-l10n-id="find_previous_label">Previous</span>
            </button>
            <div class="splitToolbarButtonSeparator"></div>
            <button id="findNext" class="toolbarButton findNext" title="Find the next occurrence of the phrase" tabindex="-1" data-l10n-id="find_next">
              <span data-l10n-id="find_next_label">Next</span>
            </button>
          </div>
        </div>

        <div id="findbarOptionsOneContainer">
          <input type="checkbox" id="findHighlightAll" class="toolbarField" tabindex="-1">
          <label for="findHighlightAll" class="toolbarLabel" data-l10n-id="find_highlight">Highlight all</label>
          <input type="checkbox" id="findMatchCase" class="toolbarField" tabindex="-1">
          <label for="findMatchCase" class="toolbarLabel" data-l10n-id="find_match_case_label">Match case</label>
        </div>
        <div id="findbarOptionsTwoContainer">
          <input type="checkbox" id="findEntireWord" class="toolbarField" tabindex="-1">
          <label for="findEntireWord" class="toolbarLabel" data-l10n-id="find_entire_word_label">Whole words</label>
          <span id="findResultsCount" class="toolbarLabel hidden"></span>
        </div>

        <div id="findbarMessageContainer">
          <span id="findMsg" class="toolbarLabel"></span>
        </div>
      </div>  <!-- findbar -->

      <div id="secondaryToolbar" class="secondaryToolbar hidden doorHangerRight">
        <div id="secondaryToolbarButtonContainer">
          <button id="secondaryPresentationMode" class="secondaryToolbarButton presentationMode visibleLargeView" title="Switch to Presentation Mode" tabindex="-1" data-l10n-id="presentation_mode">
            <span data-l10n-id="presentation_mode_label">Presentation Mode</span>
          </button>

          <button id="secondaryOpenFile" class="secondaryToolbarButton openFile visibleLargeView" title="Open File" tabindex="-1" data-l10n-id="open_file">
            <span data-l10n-id="open_file_label">Open</span>
          </button>

          <button id="secondaryPrint" class="secondaryToolbarButton print visibleMediumView" title="Print" tabindex="-1" data-l10n-id="print">
            <span data-l10n-id="print_label">Print</span>
          </button>

          <button id="secondaryDownload" class="secondaryToolbarButton download visibleMediumView" title="Download" tabindex="-1" data-l10n-id="download">
            <span data-l10n-id="download_label">Download</span>
          </button>

          <a href="#" id="secondaryViewBookmark" class="secondaryToolbarButton bookmark visibleSmallView" title="Current view (copy or open in new window)" tabindex="-1" data-l10n-id="bookmark">
            <span data-l10n-id="bookmark_label">Current View</span>
          </a>

          <div class="horizontalToolbarSeparator visibleLargeView"></div>

          <button id="firstPage" class="secondaryToolbarButton firstPage" title="Go to First Page" tabindex="-1" data-l10n-id="first_page">
            <span data-l10n-id="first_page_label">Go to First Page</span>
          </button>
          <button id="lastPage" class="secondaryToolbarButton lastPage" title="Go to Last Page" tabindex="-1" data-l10n-id="last_page">
            <span data-l10n-id="last_page_label">Go to Last Page</span>
          </button>

          <div class="horizontalToolbarSeparator"></div>

          <button id="pageRotateCw" class="secondaryToolbarButton rotateCw" title="Rotate Clockwise" tabindex="-1" data-l10n-id="page_rotate_cw">
            <span data-l10n-id="page_rotate_cw_label">Rotate Clockwise</span>
          </button>
          <button id="pageRotateCcw" class="secondaryToolbarButton rotateCcw" title="Rotate Counterclockwise" tabindex="-1" data-l10n-id="page_rotate_ccw">
            <span data-l10n-id="page_rotate_ccw_label">Rotate Counterclockwise</span>
          </button>

          <div class="horizontalToolbarSeparator"></div>

          <button id="cursorSelectTool" class="secondaryToolbarButton selectTool toggled" title="Enable Text Selection Tool" tabindex="-1" data-l10n-id="cursor_text_select_tool">
            <span data-l10n-id="cursor_text_select_tool_label">Text Selection Tool</span>
          </button>
          <button id="cursorHandTool" class="secondaryToolbarButton handTool" title="Enable Hand Tool" tabindex="-1" data-l10n-id="cursor_hand_tool">
            <span data-l10n-id="cursor_hand_tool_label">Hand Tool</span>
          </button>

          <div class="horizontalToolbarSeparator"></div>

          <button id="scrollVertical" class="secondaryToolbarButton scrollModeButtons scrollVertical toggled" title="Use Vertical Scrolling" tabindex="-1" data-l10n-id="scroll_vertical">
            <span data-l10n-id="scroll_vertical_label">Vertical Scrolling</span>
          </button>
          <button id="scrollHorizontal" class="secondaryToolbarButton scrollModeButtons scrollHorizontal" title="Use Horizontal Scrolling" tabindex="-1" data-l10n-id="scroll_horizontal">
            <span data-l10n-id="scroll_horizontal_label">Horizontal Scrolling</span>
          </button>
          <button id="scrollWrapped" class="secondaryToolbarButton scrollModeButtons scrollWrapped" title="Use Wrapped Scrolling" tabindex="-1" data-l10n-id="scroll_wrapped">
            <span data-l10n-id="scroll_wrapped_label">Wrapped Scrolling</span>
          </button>

          <div class="horizontalToolbarSeparator scrollModeButtons"></div>

          <button id="spreadNone" class="secondaryToolbarButton spreadModeButtons spreadNone toggled" title="Do not join page spreads" tabindex="-1" data-l10n-id="spread_none">
            <span data-l10n-id="spread_none_label">No Spreads</span>
          </button>
          <button id="spreadOdd" class="secondaryToolbarButton spreadModeButtons spreadOdd" title="Join page spreads starting with odd-numbered pages" tabindex="-1" data-l10n-id="spread_odd">
            <span data-l10n-id="spread_odd_label">Odd Spreads</span>
          </button>
          <button id="spreadEven" class="secondaryToolbarButton spreadModeButtons spreadEven" title="Join page spreads starting with even-numbered pages" tabindex="-1" data-l10n-id="spread_even">
            <span data-l10n-id="spread_even_label">Even Spreads</span>
          </button>

          <div class="horizontalToolbarSeparator spreadModeButtons"></div>

          <button id="documentProperties" class="secondaryToolbarButton documentProperties" title="Document Properties…" tabindex="-1" data-l10n-id="document_properties">
            <span data-l10n-id="document_properties_label">Document Properties…</span>
          </button>
        </div>
      </div>  <!-- secondaryToolbar -->

      <div class="toolbar">
        <div id="toolbarContainer">
          <div id="toolbarViewer">
            <div id="toolbarViewerLeft">
              <!-- <button id="sidebarToggle" class="toolbarButton" title="Toggle Sidebar" tabindex="11" data-l10n-id="toggle_sidebar">
                <span data-l10n-id="toggle_sidebar_label">Toggle Sidebar</span>
              </button> -->
              <div class="toolbarButtonSpacer"></div>
              <button id="viewFind" class="toolbarButton" title="Find in Document" tabindex="-1" data-l10n-id="findbar">
                <span data-l10n-id="findbar_label">Find</span>
              </button>
              <div class="splitToolbarButton hiddenSmallView">
                <button class="toolbarButton pageUp" title="Previous Page" data-id="previous" tabindex="-1" data-l10n-id="previous">
                  <span data-l10n-id="previous_label">Previous</span>
                </button>
                <div class="splitToolbarButtonSeparator"></div>
                <button class="toolbarButton pageDown" title="Next Page" data-id="next" tabindex="-1" data-l10n-id="next">
                  <span data-l10n-id="next_label">Next</span>
                </button>
              </div>
              <input type="number" id="pageNumber" class="toolbarField pageNumber" title="Page" value="1" size="4" min="1" tabindex="-1" data-l10n-id="page">
              <span id="numPages" class="toolbarLabel"></span>
            </div>
            <div id="toolbarViewerRight">
              <button id="presentationMode" class="toolbarButton presentationMode hiddenLargeView" title="Switch to Presentation Mode" tabindex="-1" data-l10n-id="presentation_mode">
                <span data-l10n-id="presentation_mode_label">Presentation Mode</span>
              </button>

              <button id="openFile" class="toolbarButton openFile hiddenLargeView" title="Open File" tabindex="-1" data-l10n-id="open_file">
                <span data-l10n-id="open_file_label">Open</span>
              </button>

              <button id="print" class="toolbarButton print hiddenMediumView" title="Print" tabindex="-1" data-l10n-id="print">
                <span data-l10n-id="print_label">Print</span>
              </button>

              <button id="download" class="toolbarButton download hiddenMediumView" title="Download" tabindex="-1" data-l10n-id="download">
                <span data-l10n-id="download_label">Download</span>
              </button>
              <a href="#" id="viewBookmark" class="toolbarButton bookmark hiddenSmallView" title="Current view (copy or open in new window)" tabindex="-1" data-l10n-id="bookmark">
                <span data-l10n-id="bookmark_label">Current View</span>
              </a>

              <div class="verticalToolbarSeparator hiddenSmallView"></div>

              <button id="secondaryToolbarToggle" class="toolbarButton" title="Tools" tabindex="-1" data-l10n-id="tools">
                <span data-l10n-id="tools_label">Tools</span>
              </button>
            </div>
            <div id="toolbarViewerMiddle">
              <div class="splitToolbarButton">
                <button id="zoomOut" class="toolbarButton zoomOut" title="Zoom Out" tabindex="-1" data-l10n-id="zoom_out">
                  <span data-l10n-id="zoom_out_label">Zoom Out</span>
                </button>
                <div class="splitToolbarButtonSeparator"></div>
                <button id="zoomIn" class="toolbarButton zoomIn" title="Zoom In" tabindex="-1" data-l10n-id="zoom_in">
                  <span data-l10n-id="zoom_in_label">Zoom In</span>
                </button>
              </div>
              <span id="scaleSelectContainer" class="dropdownToolbarButton">
              <select id="scaleSelect" title="Zoom" tabindex="-1" data-l10n-id="zoom">
                <option id="pageAutoOption" title="" value="auto" selected="selected" data-l10n-id="page_scale_auto">Automatic Zoom</option>
                <option id="pageActualOption" title="" value="page-actual" data-l10n-id="page_scale_actual">Actual Size</option>
                <option id="pageFitOption" title="" value="page-fit" data-l10n-id="page_scale_fit">Page Fit</option>
                <option id="pageWidthOption" title="" value="page-width" data-l10n-id="page_scale_width">Page Width</option>
                <option id="customScaleOption" title="" value="custom" disabled="disabled" hidden="true"></option>
                <option title="" value="0.5" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 50 }'>50%</option>
                <option title="" value="0.75" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 75 }'>75%</option>
                <option title="" value="1" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 100 }'>100%</option>
                <option title="" value="1.25" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 125 }'>125%</option>
                <option title="" value="1.5" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 150 }'>150%</option>
                <option title="" value="2" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 200 }'>200%</option>
                <option title="" value="3" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 300 }'>300%</option>
                <option title="" value="4" data-l10n-id="page_scale_percent" data-l10n-args='{ "scale": 400 }'>400%</option>
              </select>
            </span>
            </div>
          </div>
        </div>
      </div>

      <menu type="context" id="viewerContextMenu">
        <menuitem id="contextFirstPage" label="First Page"
                  data-l10n-id="first_page"></menuitem>
        <menuitem id="contextLastPage" label="Last Page"
                  data-l10n-id="last_page"></menuitem>
        <menuitem id="contextPageRotateCw" label="Rotate Clockwise"
                  data-l10n-id="page_rotate_cw"></menuitem>
        <menuitem id="contextPageRotateCcw" label="Rotate Counter-Clockwise"
                  data-l10n-id="page_rotate_ccw"></menuitem>
      </menu>

      <div id="errorWrapper" hidden='true'>
        <div id="errorMessageLeft">
          <span id="errorMessage"></span>
          <button id="errorShowMore" data-l10n-id="error_more_info">
            More Information
          </button>
          <button id="errorShowLess" data-l10n-id="error_less_info" hidden='true'>
            Less Information
          </button>
        </div>
        <div id="errorMessageRight">
          <button id="errorClose" data-l10n-id="error_close">
            Close
          </button>
        </div>
        <div class="clearBoth"></div>
        <label for="errorMoreInfo" style="display: none;">Error More Info</label>
        <textarea id="errorMoreInfo" hidden='true' readonly="readonly"></textarea>
      </div>

      <div id="overlayContainer" class="hidden">
        <div id="passwordOverlay" class="container hidden">
          <div class="dialog">
            <div class="row">
              <p id="passwordText" data-l10n-id="password_label">Enter the password to open this PDF file:</p>
            </div>
            <div class="row">
              <label for="password" style="display: none;">Enter the password to open this PDF file</label>
              <input type="password" id="password" class="toolbarField">
            </div>
            <div class="buttonRow">
              <button id="passwordCancel" class="overlayButton"><span data-l10n-id="password_cancel">Cancel</span></button>
              <button id="passwordSubmit" class="overlayButton"><span data-l10n-id="password_ok">OK</span></button>
            </div>
          </div>
        </div>
        <div id="documentPropertiesOverlay" class="container hidden">
          <div class="dialog">
            <div class="row">
              <span data-l10n-id="document_properties_file_name">File name:</span> <p id="fileNameField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_file_size">File size:</span> <p id="fileSizeField">-</p>
            </div>
            <div class="separator"></div>
            <div class="row">
              <span data-l10n-id="document_properties_title">Title:</span> <p id="titleField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_author">Author:</span> <p id="authorField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_subject">Subject:</span> <p id="subjectField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_keywords">Keywords:</span> <p id="keywordsField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_creation_date">Creation Date:</span> <p id="creationDateField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_modification_date">Modification Date:</span> <p id="modificationDateField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_creator">Creator:</span> <p id="creatorField">-</p>
            </div>
            <div class="separator"></div>
            <div class="row">
              <span data-l10n-id="document_properties_producer">PDF Producer:</span> <p id="producerField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_version">PDF Version:</span> <p id="versionField">-</p>
            </div>
            <div class="row">
              <span data-l10n-id="document_properties_page_count">Page Count:</span> <p id="pageCountField">-</p>
            </div>
            <div class="buttonRow">
              <button id="documentPropertiesClose" class="overlayButton"><span data-l10n-id="document_properties_close">Close</span></button>
            </div>
          </div>
        </div>
        <div id="printServiceOverlay" class="container hidden">
          <div class="dialog">
            <div class="row">
              <span data-l10n-id="print_progress_message">Preparing document for printing…</span>
            </div>
            <div class="row">
              <progress value="0" max="100"></progress>
              <span data-l10n-id="print_progress_percent" data-l10n-args='{ "progress": 0 }' class="relative-progress">0%</span>
            </div>
            <div class="buttonRow">
              <button id="printCancel" class="overlayButton"><span data-l10n-id="print_progress_close">Cancel</span></button>
            </div>
          </div>
        </div>
      </div>  <!-- overlayContainer -->
    </div>


  <script type="text/javascript">

    // jQuery.getScript makes it difficult to debug scripts;
    // this version makes the script visible in browser debuggers.
    jQuery.extend({
        loadScript: function(url, callback) {
          var head = document.getElementsByTagName("head")[0];
          var script = document.createElement("script");
          script.src = url;

          // Handle Script loading
          {
             var done = false;

             // Attach handlers for all browsers
             script.onload = script.onreadystatechange = function(){
                if ( !done && (!this.readyState ||
                      this.readyState == "loaded" || this.readyState == "complete") ) {
                   done = true;
                   if (callback)
                      callback();

                   // Handle memory leak in IE
                   script.onload = script.onreadystatechange = null;
                }
             };
          }

          head.appendChild(script);

          // We handle everything using the script element injection
          return undefined;
       },
    });

    <% if %w[leverpress michigan cjs cseas csas lrccs ummaa].include? @subdomain %>
        // Create custom annotator button that is aware of its state
        AnnotationTool = cozy.Control.Widget.Toggle.extend({
        defaultTemplate: '<button data-hypothesis-trigger class="button--sm annotation" data-toggle="button" aria-label="Open Annotations"><i class="fa fa-pencil" title="Open annotation panel" aria-hidden="true"></i></button><div class="annotation-count" data-hypothesis-annotation-count></div>',

        initialize: function(options) {

              cozy.Control.Widget.Toggle.prototype.initialize.apply(this, arguments);

              this.options.states = [{
                stateName: 'close-annotator',
                onClick: this.openAnnotator.bind(this)
              },
              {
                stateName: 'open-annotator',
                onClick: this.closeAnnotator.bind(this)
              }];
            },

            openAnnotator: function(self, reader) {
              this.options.$panel.removeClass("annotator-collapsed");
              self.state('open-annotator');
            },

            closeAnnotator: function(self, reader) {
              this.options.$panel.addClass("annotator-collapsed");
              self.state('close-annotator');
            }

        })
      <% end %>

    cozy.Control.Preferences.fieldset.PDFScale = cozy.Control.Preferences.fieldset.Scale.extend({
      options: {},

      intialize: function(control, options) {
        cozy.Control.Preferences.fieldset.Scale.prototype.onAdd.apply(this, arguments);
      },

      initializeForm: function(form) {
        // EOT
        if ( ! this._inputs ) {
          this._inputs = form.querySelector('#x' + this._id + '-list');
          this._actionReset = form.querySelector('#x' + this._id + '-reset');
          this._actionReset.addEventListener('click', function(event) {
            event.preventDefault();
            this._inputs.querySelector('input[value="auto"]').checked = true;
          }.bind(this));
        }

        this._preview = form.querySelector(`#x${this._id}-preview > div`);

        var currentScale = this._control._reader.options.scale || 'auto';
        if (this._inputs.querySelector('input[value="' + currentScale + '"]')) {
          this._inputs.querySelector('input[value="' + currentScale + '"]').checked = true;
        }
        this._current.scale = currentScale;

        this._inputs.addEventListener('change', function(event) {
          var target = event.target;
          if ( target.tagName == 'INPUT' ) {
            this._updatePreview();
          }
        }.bind(this));

        this._updatePreview();
      },

      updateForm: function(form, options, saveable) {
        var current = this._inputs.querySelector('input:checked') ? this._inputs.querySelector('input:checked').value : 'auto';
        options.scale = saveable.scale = current;
      },

      _updatePreview: function() {
        var current = this._inputs.querySelector('input:checked') ? this._inputs.querySelector('input:checked').value : 'auto';
        var scale = ( parseFloat(current, 10) );
        if ( isNaN(scale) ) {
          scale = '1.0';
        }
        this._preview.parentNode.dataset.scale = current;
        this._preview.style.transform = "scale(" + scale + ")";
      },

      template: function() {
        var html = '<fieldset class="cozy-fieldset-pdf-scale">' +
          '<legend>Zoom In/Out</legend>' +
          '<style>' +
            '.cozy-fieldset-pdf-scale label { margin: 0.5 0 !important; }' +
            '.cozy-fieldset-pdf-scale .preview--text_size[data-scale="auto"] { height: auto; }' +
            '.cozy-fieldset-pdf-scale .preview--text_size[data-scale="page-fit"] { height: auto; width: 60%; }' +
            '.cozy-fieldset-pdf-scale .preview--text_size[data-scale="page-width"] { width: 60%; }' +
            '.cozy-fieldset-pdf-scale .preview--text_size[data-scale="page-actual"] > div { width: 150%; transform: scale(1.5) !important; }' +
          '</style>' +
          '<div class="preview--text_size" id="x${this._id}-preview">' +
            '<div style="transform-origin: top left">' +
              '‘Yes, that’s it,’ said the Hatter with a sigh: ‘it’s always tea-time, and we’ve no time to wash the things between whiles.’' +
            '</div>' +
          '</div>' +
          '<ul id="x${this._id}-list" style="margin-top: 1rem">' +
            '<li><label><input type="radio" name="scaleSelect" value="auto" /> Automatic Zoom</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="page-actual" /> Actual Size</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="page-fit" /> Page Fit</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="page-width" /> Page Width</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="0.5" /> 50%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="0.75" /> 75%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="1" /> 100%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="1.25" /> 125%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="1.5" /> 150%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="2" /> 200%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="3" /> 300%</label></li>' +
            '<li><label><input type="radio" name="scaleSelect" value="4" /> 400%</label></li>' +
          '</ul>' +
          '<p style="margin-top: 1.5rem">' +
            '<button id="x${this._id}-reset" class="reset button--inline" style="margin-left: 8px">Reset</button>' +
          '</p>' +
        '</fieldset>';
        return html.replace(/\$\{this._id\}/g, this._id);
      }
    });

    cozy.Control.Preferences.prototype._createPanel = function() {
      var self = this;
      if ( this._modal._container.querySelector('form') ) { return; }

      var template = '';
      var possible_fieldsets = [];
      possible_fieldsets.push('PDFScale');
      this._fieldsets = [];
      possible_fieldsets.forEach(function(cls) {
        var fieldset = new cozy.Control.Preferences.fieldset[cls](this);
        template += fieldset.template();
        this._fieldsets.push(fieldset);
      }.bind(this));

      template = '<form>' + template + '</form>';

      this._modal._container.querySelector('main').innerHTML = template;
      this._form = this._modal._container.querySelector('form');
    };

    var PDFPreferences = cozy.Control.Preferences.extend({

      EOT: true

    });

    // -- if we needed to extend the Navigator, we'd start here.
    var PDFNavigator = cozy.Control.Navigator.extend({

      // _initializeNavigator: function(locations) {
      //   this._initiated = true;
      //   this._total = locations.total;
      //   this._last_value = this._control.value;
      //   this._spanTotalLocations.innerHTML = this._total;
      //   this._update();
      //   setTimeout(function() {
      //     this._container.classList.add('initialized');
      //   }.bind(this), 0);
      // },

      EOT: true
    });

    var PDFSearch = cozy.Control.Search.extend({

      onAdd: function(reader) {
        var self = this;
        console.log("AHOY AHOY", this);
        this._reader.on('ready', function() {
          // updatefindcontrolstate -- emites state=FOUND before all the results are found
          this._reader.PDFViewerApplication.eventBus.on('updatefindmatchescount', this._waitForResults.bind(this));
          this._reader.PDFViewerApplication.eventBus.on('updatefindcontrolstate', this._waitForQuery.bind(this));
        }.bind(this));

        return cozy.Control.Search.prototype.onAdd.apply(this, arguments);
      },

      submitQuery: function() {
        this._doWaitForResults = false;
        this._reader.PDFViewerApplication.findController.executeCommand('find', { source: this._reader, type: 'find', query: this.searchString, phraseSearch: true, caseSensitive: false, entireWord: false, highlightAll: true, findPrevious: null })
      },

      _waitForQuery: function(argv) {
        // if ( this.queryTimer ) { clearTimeout(this.queryTimer); }
        if ( argv.state == 0 || argv.state == 2 ) {
          // the query is done, so we can start computing the results
          this._doWaitForResults = true;
        } else if ( argv.state == 1 ) {
          this._data = { highlight_off: "yes", search_results: [] };
          this._buildResults();
        }
        console.log("AHOY updatefindcontrolstate", argv);
      },

      _waitForResults: function(argv) {
        if ( ! this._doWaitForResults ) { return; }
        if ( this.searchTimer ) { clearTimeout(this.searchTimer); }
        this.searchTimer = setTimeout(this._gatherResults.bind(this), 500);
        console.log("AHOY updatefindmatchescount", argv.matchesCount.total);
      },

      _gatherResults: function() {
        var self = this;

        this._data = { search_results: [], highlight_off: 'yes' };
        var pdfViewer = this._reader.pdfViewer;
        var findController = this._reader.PDFViewerApplication.findController;

        for(var i = 0; i < pdfViewer.pagesCount; i++) {
          var matches = findController._pageMatches[i];
          if ( ! matches ) { continue ; }
          var text = findController._pageContents[i];
          matches.forEach(function(match, index) {
            var snippet = self._getMatch(text, self.searchString, match);
            self._data.search_results.push({ cfi: 'page=' + ( i + 1 ), matchIdx: match, snippet: snippet });
          })
        }

        this._buildResults();
      },

      _getMatch: function(string, term, index) {
        if(index >= 0)
        {
          var _ws = [" ","\t"];

          var whitespace = 0;
          var rightLimit = 0;
          var leftLimit = 0;

          var whitespaceLimit = 8; // 4

          // right trim index
          for(rightLimit = index + term.length; whitespace < whitespaceLimit; rightLimit++)
          {
            if(rightLimit >= string.length){break}
            if(_ws.indexOf(string.charAt(rightLimit)) >= 0){whitespace += 1}
          }

          whitespace = 0;
          // left trim index
          for(leftLimit = index; whitespace < whitespaceLimit; leftLimit--)
          {
            if(leftLimit < 0){break}
            if(_ws.indexOf(string.charAt(leftLimit)) >= 0){whitespace += 1}
          }

          var snippet = string.substr(leftLimit + 1, rightLimit - leftLimit - 1).replace(/([\.\;\,])(\w)/g, '$1 $2');

          snippet = snippet.replace(/([a-z])([A-Z])/g, '$1 $2');
          snippet = snippet.replace(/([a-z])(\d+)([a-z])/gi, '$1 $2 $3');
          snippet = snippet.replace(/[^ -~]+/g, "");
          // // --- cozy-sun-bear doesn't highlight terms in search results
          // var termRe = new RegExp('(' + term + ')', 'gi');
          // snippet = snippet.replace(termRe, '<strong>$1</strong>');
          return snippet;
        }
        return // return nothing
      },

      EOT: true

    });

    var PDFContents = cozy.Control.Contents.extend({
      _bindEvents: function() {
        var self = this;

        this._control.setAttribute('id', 'sidebarToggle');

        <% if @parent_presenter.pdf_ebook_presenter.intervals? %>
          var template =
            '<div id="toolbarSidebar">' +
              '<div class="splitToolbarButton toggled">' +
                '<button id="viewOutline" class="toolbarButton toggled" title="Show Table of Contents (double-click to expand/collapse all items)" tabindex="-1">Table of Contents</button>' +
                '<button id="viewThumbnail" class="toolbarButton" title="Show Thumbnails" tabindex="-1">Thumbnails</button>' +
                '<button id="viewAttachments" class="toolbarButton" title="Show Attachments" tabindex="-1">Attachments</button>' +
              '</div>' +
            '</div>' +
            '<div id="sidebarContent">' +
              '<div id="outlineView"></div>' +
              '<div id="thumbnailView" class="hidden"></div>' +
              '<div id="attachmentsView" class="hidden"></div>' +
            '</div>';
        <% else %>
          var template =
            '<div id="toolbarSidebar">' +
              '<div class="splitToolbarButton toggled hidden">' +
                '<button id="viewOutline" class="toolbarButton" title="Show Table of Contents (double-click to expand/collapse all items)" tabindex="-1">Table of Contents</button>' +
                '<button id="viewThumbnail" class="toolbarButton toggled" title="Show Thumbnails" tabindex="-1">Thumbnails</button>' +
                '<button id="viewAttachments" class="toolbarButton" title="Show Attachments" tabindex="-1">Attachments</button>' +
              '</div>' +
            '</div>' +
            '<div id="sidebarContent">' +
              '<div id="outlineView" class="hidden"></div>' +
              '<div id="thumbnailView"></div>' +
              '<div id="attachmentsView" class="hidden"></div>' +
            '</div>';
        <% end %>

        this._modal = this._reader.modal({
          template: template,
          title: 'Contents',
          region: 'left',
          className: 'cozy-modal-contents',
          callbacks: {
            onShow: function() {
              self._pdfSidebar.open()
            },
            onClose: function() {
              self._pdfSidebar.close()
            }
          }
        });

        this._modal._container.querySelector('.modal__content').setAttribute('id', 'sidebarContainer');

        this._reader.on('updateContents', function(data) {

          this._pdfSidebar = this._reader.PDFViewerApplication.pdfSidebar;
          this._pdfSidebar.outlineButton.removeAttribute('tabindex');
          this._pdfSidebar.thumbnailButton.removeAttribute('tabindex');
          this._pdfSidebar.attachmentsButton.removeAttribute('tabindex');

          $(this._control).on('click', function(event) {
            self._reader.tracking.action('contents/open');
            self._modal.activate();
          });

          this._pdfSidebar.eventBus.on('pagechanging', function(evt) {
            if ( this._pdfSidebar.isOpen ) {
              this._modal.closeModal();
            }
          }.bind(this))

        }.bind(this));
      }
    });

    var PDFReader = cozy.Reader.extend({

      open: function(target, cb) {
        var self = this;
        if ( cb == null ) { cb = function() {}; }

        this._panes['epub'].setAttribute('id', 'viewerContainer');
        $(this._panes['epub']).append('<div id="viewer" class="pdfViewer"></div>');

        this.annotations = {
          reset: function() { /* NOP */ }
        };

        // turn off the default updateLocation handler
        this.off('updateLocation');

        this.on('updateLocation', function(location) {
          var tmp_href = window.location.href.split('#');
          tmp_href[1] = location.start.substr(8, location.start.length - 8 - 1);
          var context = [{ cfi: location.start }, '', tmp_href.join('#')];
          var tracking = { cfi: location.start, href: location.href, action: self.tracking.action()};
          if ( tracking.action && tracking.action.match(/\/go\/link/) ) {
            history.pushState.apply(history, context);
          } else {
            history.replaceState.apply(history, context);
          }
          if ( location.percentage ) {
            var p = Math.ceil(location.percentage * 100);
            document.title = `${p}% - ${self._original_document_title}`;
          }
          self.fire('trackPageview', tracking)
        });

        // use the viewer.js loading (download progress) bar, with tweaked styles. The div structure here is from viewer.js
        // note, the screen reader `aria-live` stuff is on #pdfLoadingProgressBar above because:
        //   1) no chance of MutationObserver infinite loops by altering the observed element in the callback
        //   2) many sources say the `aria-live` element must be present on the document to be picked up before changes are made
        //   3) it's a hidden `class="sr-only"` element (with dynamically-changing percentage text), whereas this one is visible
        $('<div id="loadingBar" class="helio-loading-bar" aria-hidden="true"><div id="helioPdfProgressBar" class="progress" ><div class="glimmer"></div></div></div>').prependTo('.cozy-module-main');
        var helioPdfProgressBar = document.querySelector("#helioPdfProgressBar");
        var helioPdfProgressBarAnnounce = document.querySelector("#pdfLoadingProgressBar");

        var observerOptions = {
          attributes: true,
          attributeFilter: ['style']
        };

        var lastAnnounceTime;

        var observer = new MutationObserver(function() {
          var progressBarWidth = helioPdfProgressBar.style.width;
          var helioPdfProgressBarAnnouncement = progressBarWidth + ' loaded';
          var helioPdfProgressBarPercent = parseInt(progressBarWidth, 10);

          if(!lastAnnounceTime) {
            helioPdfProgressBarAnnounce.innerHTML = 'PDF loading started';
            lastAnnounceTime = $.now();
          }
          else if ($.now() - lastAnnounceTime > 5000) { // wait 5 seconds minimum between spoken updates
            helioPdfProgressBarAnnounce.innerHTML = helioPdfProgressBarAnnouncement;
            lastAnnounceTime = $.now();
          }

          if (helioPdfProgressBarPercent === 100) {
            helioPdfProgressBarAnnounce.innerHTML = 'PDF loading complete';
            this.disconnect();
          }
        });
        observer.observe(helioPdfProgressBar, observerOptions);

        $.loadScript("/web/viewer.js", function() {
          // stop Mozilla viewer messing with page title, also alters external link behavior, apparently
          // https://github.com/mozilla/pdf.js/blob/85acc9acac4c7699303216727a6300a6097e4dd3/web/app.js#L136
          window.PDFViewerApplication.isViewerEmbedded = true;
          window.PDFViewerApplication.setTitle = function(title) { /* NOP */ }
          self.PDFViewerApplication = window.PDFViewerApplication;

          self.PDFViewerApplication.open(self.options.href).then(function() {
            self.pdfViewer = this.PDFViewerApplication.pdfViewer;

            // monkeypatch the PDFLinkService to be able to track when _it_
            // thinks clicks are worth of pushing onto history so we can
            // tell when to push links onto history.
            self.PDFViewerApplication.pdfLinkService.pdfHistory = {
              pushCurrentPosition: function() { /* NO OP */ },
              push: function(context) {
                self.tracking.action('contents/go/link');
                self._will_be_setting_zoom_to = context.explicitDest[4];
                self._will_be_setting_zoom_from = self.pdfViewer.currentScaleValue;
              }
            }

            var setupInterval = setInterval(function() {
              if ( self.PDFViewerApplication.pdfDocument != null ) {
                clearInterval(setupInterval);

                // --- reset the zoom?
                // self.pdfViewer.currentScaleValue = 'auto';
                // self.options.scale = 'auto';

                // --- or update to what was stored
                self.options.scale = self.pdfViewer.currentScaleValue;


                // add events to viewer
                self.PDFViewerApplication.eventBus.on('pagechanging', function(evt) {
                  var pageNumber = evt.pageNumber;
                  self.fire('relocated', { start: pageNumber });
                  self.fire('updateLocation', {
                    start: 'epubcfi(page=' + pageNumber + ')',
                    href: self.options.href + '#page=' + pageNumber,
                    percentage: ( pageNumber / self.PDFViewerApplication.pagesCount )
                  });
                });

                self.pdfViewer.eventBus.on('scalechanging', function(evt) {
                  var currentScaleValue = self.options.scale;
                  if ( self._will_be_setting_zoom_to && self._will_be_setting_zoom_from ) {
                    // and clear these
                    self._will_be_setting_zoom_to = self._will_be_setting_zoom_from = null;
                    self.pdfViewer.currentScaleValue = currentScaleValue;
                  }
                });

                self.PDFViewerApplication.pdfDocument.getMetadata().then(function(data) {
                  var metadata = {};
                  metadata.layout = 'pdf';

                  if ( data.metadata ) {
                    if ( data.metadata.has("dc:title") ) {
                      metadata.title = data.metadata.get("dc:title");
                    }
                    if ( data.metadata.has("dc:author") ) {
                      metadata.author = data.metadata.get("dc:author");
                    }
                  }
                  self.metadata = metadata;

                  self.fire("updateTitle", self.metadata);
                  self.fire('updateContents', {});
                  self.locations = { total: self.PDFViewerApplication.pagesCount };
                  self.locations.locationFromCfi = function(pageNum) {
                    return pageNum;
                  };
                  self.locations.percentageFromCfi = function(pageNum) {
                    return ( pageNum / self.locations.total );
                  };
                  self.locations.cfiFromPercentage = function(percent) {
                    var pageNum = Math.round(self.locations.total * percent);
                    if ( pageNum < 1 ) { pageNum = 1; }
                    if ( pageNum > this._total ) { pageNum = this._total; }
                    return { start: pageNum };
                  };

                  self.fire('updateLocations',  self.locations);
                  self.fire('relocated', self.currentLocation());
                  self._disableBookLoader();
                  cb();
                });

                self.fire("ready");
              } else {
                console.log("AHOY WAITING");
              }
            }, 100);
          });
        });
      },

      currentLocation: function() {
        return { start: { cfi: this.PDFViewerApplication.page } };
      },

      _scroll: function(delta) {
        switch(delta) {
          case 'PREV':
            this.prev();
            break;
          case 'NEXT':
            this.next();
            break;
          case 'HOME':
            this.PDFViewerApplication.page = 1;
            break;
          case 'END':
            this.PDFViewerApplication.page = this.PDFViewerApplication.pagesCount;
            break;
        }
      },

      gotoPage: function(value) {
        var pageNum;
        if ( typeof(value) == "string" ) {
          if ( value.indexOf('epubcfi') > -1 ) {
            pageNum = value.replace('epubcfi(page=','').replace(')', '');
          } else {
            pageNum = value.replace('page=','');
          }
        } else if ( typeof(value) == 'object' && value.start ) {
          pageNum = value.start;
        } else {
          pageNum = value;
        }
        this.pdfViewer.currentPageNumber = parseInt(pageNum, 10);
      },

      reopen: function(options) {
        this.options.scale = options.scale;
        var newScale = this.options.scale;
        // var currentScale = this.pdfViewer.currentScaleValue;
        // var newScale = parseInt(options.scale) / 100.0;
        // if ( newScale == 1.0 ) { newScale = 'auto'; }
        // else {
        //   // calculate what 'auto' would be
        //   var currentPage = reader.pdfViewer._pages[reader.pdfViewer._currentPageNumber - 1];
        //   var hPadding = 40; var vPadding = 5;
        //   var pageWidthScale = (reader.pdfViewer.container.clientWidth - hPadding) /
        //                        currentPage.width * currentPage.scale;
        //   var pageHeightScale = (reader.pdfViewer.container.clientHeight - vPadding) /
        //                         currentPage.height * currentPage.scale;
        //   var horizontalScale = pageWidthScale;
        //   newScale = Math.min(1.25, horizontalScale) * newScale;
        // }
        // this.options._currentScaleValue = newScale;
        this.pdfViewer.currentScaleValue = newScale;
      },

      EOT: true

    });

    var reader = new PDFReader('mainContainer', {
      // href: location.search.replace('?file=', ''),
      href: '<%= "#{@presenter.id}/file?#{@presenter.browser_cache_breaker}" %>',
      download_links: <%= @ebook_download_presenter.csb_download_links.to_json.html_safe %>,
      metadata: {
        title: '<%= raw escape_javascript(@parent_presenter.page_title) %>'
      }
    });

    <%= render "cozy_controls_top", presenter: @presenter, parent_presenter: @parent_presenter %>

    <%= render "cozy_controls_bottom", presenter: @presenter, parent_presenter: @parent_presenter %>

    <% if %w[leverpress michigan cjs cseas csas lrccs ummaa].include? @subdomain %>
    // Annotation widget checks and initialization
        var tm;
        function checkForAnnotator(cb, w) {
          if (!w) {
            w = window;
          }
          tm = setTimeout(function () {
            if (w && w.annotator) {
              clearTimeout(tm);
              cb();
            } else {
              checkForAnnotator(cb, w);
            }
          }, 100);
        }

        var $panel = $('.annotator-frame');

        // pass the reference to the panel
        var annotation_tool = new AnnotationTool({
          region: 'top.toolbar.left',
          $panel: $panel
        })
        annotation_tool.addTo(reader);
      <% end %>

    // start reader
    reader.start();

    // distinguish these buttons from the links underneath, too much CSS to add otherwise, methinks
    var element = document.getElementById("viewOutline");
    element.classList.add("cozy-control", "button--lg");
    var element = document.getElementById("viewThumbnail");
    element.classList.add("cozy-control", "button--lg");
  </script>


  <%= render 'shared/ga' %>
<% end %>
<%= render template: 'layouts/mozilla-pdf-viewer' %>
