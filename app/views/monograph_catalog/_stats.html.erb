<% content_for :head do %>
  <%# This works to prevent Turbolinks breaking the IRUS widget load, at the expense of disabling Turbolinks on any... %>
  <%# monograph catalog which uses this IRUS widget tab, as this is injected into <head> for the overall page. %>
  <meta name="turbolinks-visit-control" content="reload">
  <link href="https://irus.jisc.ac.uk/r5/css/irus_r5_widget.css" rel="stylesheet">
<% end %>

<div id="irus_widget_container"></div>
<%# The fact that this script needs its ID to be set and needs to be loaded after the doc exists makes things a... %>
<%# bit difficult for Rails/Turbolinks. Were we to put in the asset pipeline and edit it to make it "Turbolinks...
<%# aware" we would also need to edit its code references to its own id. %>
<script id="irus_ir_widget" src="https://irus.jisc.ac.uk/r5/js/irus_ir_widget.js?requestor_id=fa0fac24cd80e67e01322928b4a6f58d&platform=235&item_id=oai:fulcrum.org:<%= @presenter.id %>&show_all_metric_types"></script>

<%# The reason for this MutationObserver is to detect if the IRUS widge is going to show a nasty `Exception 3030: blah blah...` message when... %>
<%# No activity/"Investigations" have happened for this item yet (or within the time frame used in the table, at least). %>
<%# With that in place I figured I'd shoehorn our privacy link in here as well, plus some text stolen from the badge legend, which we are not using. %>
<script>
  const targetNode = document.getElementById("irus_widget_container");
  const config = { childList: true };

  const maybe_show_irus_table = (mutationList, observer) => {
    for (const mutation of mutationList) {
      if (mutation.type === "childList") {
        for (const record of mutation.addedNodes) {
          if (record.id == "irus_widget_results") {
            if (document.querySelector("#irus_widget_counts > table") === null) {
              // no table found, so we delete the 3030 exception message here, then adding Fulcrum-specific text
              document.querySelector("#irus_widget_counts").innerHTML = 'IRUS represents COUNTER usage on the Fulcrum platform only, not through other channels.';
              document.querySelector("#irus_widget_counts").innerHTML += "<br />This item has no recent usage data recorded.";
            } else {
              // table found, just add our text
              document.querySelector("#irus_widget_counts").innerHTML += '<br/>IRUS represents COUNTER usage on the Fulcrum platform only, not through other channels.';
            }

            <%# note Turbolinks breaks the "jump to anchor" functionality, hence `data-turbolinks="false"` %>
            document.getElementById("irus_widget_counts").innerHTML += '<br/>Note the IRUS badge above shows total views (no date range) of full content for this item (Total_Item_Requests).';
            document.getElementById("irus_widget_counts").innerHTML += '<br/>For an explanation of Metric_Types, please see the <a href="https://irus.jisc.ac.uk/r5/support/guides/understanding_r5/">IRUS guide</a>.';
            document.getElementById("irus_widget_counts").innerHTML += '<br/>For more information on how we and partners treat your usage data, <a href="/privacy#usage_info_irus" data-turbolinks="false">see our privacy policy</a>.';
            document.getElementById("irus_widget_counts").style.display = "block";

            observer.disconnect();
          }
        }
      }
    }
  };

  const observer = new MutationObserver(maybe_show_irus_table);
  observer.observe(targetNode, config);
</script>
