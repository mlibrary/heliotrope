<% provide :page_title, @title || "Title" %>
<%# https://github.com/mlibrary/heliotrope/issues/1228 %>
<% content_for :head do %>
  <meta name="turbolinks-cache-control" content="no-cache">
  <script type="text/javascript" src="https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js"></script>
  <% if @monograph_presenter.doi.present? %>
    <script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>
  <% end %>
  <% if defined? @subdomain %>
    <%# only include hypothes.is for leverpress at this point %>
    <% if %w[leverpress].include? @subdomain %>
    <!-- hypothes.is -->
      <script type="text/javascript">
        window.hypothesisConfig = function () {
          return {
            openSidebar: false,
            theme: 'classic', // "clean" or "classic"
            enableMultiFrameSupport: true,
            onLayoutChange: function(state) {
              var $frame = $('.annotator-frame');
              var $reader = $("#reader");
            },
            externalContainerSelector: '.hypothesis-panel',
            enableExperimentalNewNoteButton: true
          };
        };
      </script>
      <script src="https://cdn.hypothes.is/hypothesis"></script>
    <% end %>
  <% end %>
  <% if @monograph_presenter.webgl? %>
    <%
# load what we need to show the webgl/3-d model if needed
webgl_id = @monograph_presenter.webgl_id
webgl = Webgl::Unity.from_directory(UnpackService.root_path_from_noid(webgl_id, 'webgl'))
@unity_loader = "/webgl/#{webgl_id}/#{webgl.unity_loader}"
@unity_json = "/webgl/#{webgl_id}/#{webgl.unity_json}"
    %>
       <!-- browser detection here -->
     <script src="<%= @unity_loader %>"></script>
	   <script>
 	   // this has to go right after @unity_loader is loaded to guarantee no random JS errors get alert-boxed
      	UnityLoader.Error.handler = function(e, t){
          // NOP to stop the nuisance alert boxes for *all* (even non-Unity) JS errors
        }
	   </script>
  <% end %>
<% end %>

<% provide :body do %>
  <% if defined? @presenter.file_set_coins_title %>
    <span class="Z3988" title="<%= @presenter.file_set_coins_title %>"></span>
  <% end %>
  <div class="skip"></div>
  <div id="epub" class="<%= @subdomain %>">
    <div id="reader"></div>

    <% if %w[leverpress].include? @subdomain %>
    <%# annotation widget counter %>
      <div class="hypothesis-panel" style="display:none;"></div>
    <% end %>

    <script type="text/javascript">
      if ( true ) {

        <% if %w[leverpress].include? @subdomain %>
          // Create custom Annotator tool that is aware of its state
          AnnotationTool = cozy.Control.Widget.Toggle.extend({
            defaultTemplate: '<button class="button--sm annotation" data-toggle="button" aria-label="Open Annotations"><i class="fa fa-pencil" title="Open and close annotation panel" aria-hidden="true"></i></button><div class="annotation-count" data-hypothesis-annotation-count></div>',


            initialize: function(options) {

              cozy.Control.Widget.Toggle.prototype.initialize.apply(this, arguments);

              this.options.states = [{
                stateName: 'open-annotator',
                onClick: this.closeAnnotator.bind(this)
              },
              {
                stateName: 'close-annotator',
                onClick: this.openAnnotator.bind(this)
              }];
            },

            _onAddExtra: function(container) {
              // super._onAddExtra(container);
              cozy.Control.Widget.Toggle.prototype._onAddExtra.apply(this, arguments);
              this.setupHook();
              return container;
            },

            openAnnotator: function(self, reader) {
              this.options.$panel.parents("body").addClass("panel-open");
              this.options.$panel.show();
              self.state('open-annotator');
            },

            closeAnnotator: function(self, reader) {
              this.options.$panel.hide();
              this.options.$panel.parents("body").removeClass("panel-open");
              self.state('close-annotator');
            },

            setupHook: function() {
              var reader = this._reader;
              reader.rendition.hooks.content.register(function(contents, view) {
                contents.window.addEventListener('scrolltorange', function (e) {
                  var range = e.detail;
                  var cfi = new reader.CFI(range, contents.cfiBase).toString();
                  if (cfi) {
                    reader.gotoPage(cfi);
                  }
                  e.preventDefault();
                });
              })
            }
          })
        <% end %>

        // Configure and initiate reader
        var reader = cozy.reader('reader', {
          href: "<%= "#{main_app.epub_url.gsub!(/\?.*/, '')}/" %>",
          skipLink: '.skip',
          useArchive: <%= @use_archive %>,
          download_links: <%= @ebook_download_presenter.csb_download_links.to_json.html_safe %>,
          loader_template: '<div class="fulcrum-loading"><div class="rect rect1"></div><div class="circle circ1"></div><div class="rect rect2"></div><div class="circle circ2"></div></div>',
          <% if %w[michigan].include? @subdomain %>
          injectStylesheet: '/css/fulcrum_enhanced_display.css',
          <% end %>
          metadata: {
            doi: '<%= @citable_link %>',
            location: 'Ann Arbor, MI'
          }
        });

        <%= render "cozy_controls_top", presenter: @presenter, monograph_presenter: @monograph_presenter %>

        <%= render "webgl_specific", presenter: @presenter, monograph_presenter: @monograph_presenter %>

        <%= render "cozy_controls_bottom", presenter: @presenter, monograph_presenter: @monograph_presenter %>

        // Annotation widget checks and initialization
        <% if %w[leverpress].include? @subdomain %>
          var tm;
          function checkForAnnotator(cb, w) {
            if (!w) {
              w = window;
            }
            tm = setTimeout(function () {
              if (w && w.annotator) {
                clearTimeout(tm);
                cb();
              } else {
                checkForAnnotator(cb, w);
              }
            }, 100);
          }

          // the panel has to be created first
          $("body").addClass("panel-open panel-right");
          var $main = $(".cozy-module-main");
          var $panel = $('<div class="special-panel cozy-module-annotator"></div>').appendTo($main);

          // pass the reference to the panel
          var annotation_tool = new AnnotationTool({
            region: 'top.toolbar.left',
            $panel: $panel,
          })
          annotation_tool.addTo(reader);

        <% end %>

        <% if @monograph_presenter.webgl? %>
          open_panel();
        <% end %>

        // Initiate EPUB Reader
        reader.start(function() {
          <% if @monograph_presenter.webgl? %>
            fetch_poi();
          <% end %>
          <% if %w[leverpress].include? @subdomain %>
            var $hypothesis_panel = $(".hypothesis-panel");
            $hypothesis_panel.css({ display: 'block', height: '100%' });
            $panel.append($hypothesis_panel);
          <% end %>
        });
      }
    </script>
  </div>
  <%= render 'shared/ga' %>
<% end %>
<%= render template: 'layouts/boilerplate' %>
