# frozen_string_literal: true

# Generated by curation_concerns:models:install
class FileSet < ActiveFedora::Base
  property :allow_display_after_expiration, predicate: ::RDF::URI.new('http://fulcrum.org/ns#allowDisplayAfterExpiration'), multiple: false do |index|
    index.as :symbol
  end

  property :allow_download, predicate: ::RDF::URI.new('http://fulcrum.org/ns#allowDownload'), multiple: false do |index|
    index.as :symbol
  end

  property :allow_download_after_expiration, predicate: ::RDF::URI.new('http://fulcrum.org/ns#allowDownloadAfterExpiration'), multiple: false do |index|
    index.as :symbol
  end

  property :allow_hi_res, predicate: ::RDF::URI.new('http://fulcrum.org/ns#allowHiRes'), multiple: false do |index|
    index.as :symbol
  end

  property :alt_text, predicate: ::RDF::Vocab::SCHEMA.accessibilityFeature do |index|
    index.as :stored_searchable
  end

  property :caption, predicate: ::RDF::Vocab::SCHEMA.caption do |index|
    index.as :stored_searchable
  end

  property :closed_captions, predicate: ::RDF::URI.new('http://fulcrum.org/ns#closed_captions') do |index|
    index.as :stored_searchable
  end

  property :content_type, predicate: ::RDF::Vocab::SCHEMA.contentType do |index|
    index.as :stored_searchable, :facetable
  end

  property :copyright_status, predicate: ::RDF::URI.new('http://fulcrum.org/ns#copyrightStatus'), multiple: false do |index|
    index.as :symbol
  end

  property :credit_line, predicate: ::RDF::URI.new('http://fulcrum.org/ns#creditLine'), multiple: false do |index|
    index.as :symbol
  end

  property :display_date, predicate: ::RDF::URI.new('http://fulcrum.org/ns#displayDate') do |index|
    index.as :stored_searchable
  end

  property :exclusive_to_platform, predicate: ::RDF::URI.new('http://fulcrum.org/ns#exclusiveToPlatform'), multiple: false do |index|
    index.as :symbol, :facetable
  end

  property :external_resource_url, predicate: ::RDF::Vocab::Identifiers.uri, multiple: false do |index|
    index.as :symbol
  end

  property :keywords, predicate: ::RDF::Vocab::DC.subject do |index|
    index.as :stored_searchable, :facetable
  end

  property :permissions_expiration_date, predicate: ::RDF::URI.new('http://fulcrum.org/ns#permissionsExpirationDate'), multiple: false do |index|
    index.as :symbol
  end
  validates :permissions_expiration_date, format: {
    with: /\A\d\d\d\d-\d\d-\d\d\z/,
    message: "Your permissions expiration date must be in YYYY-MM-DD format",
    allow_blank: true
  }

  property :redirect_to, predicate: ::RDF::URI.new('http://fulcrum.org/ns#redirectTo'), multiple: false do |index|
    index.as :symbol
  end

  property :rights_granted, predicate: ::RDF::URI.new('http://fulcrum.org/ns#rightsGranted'), multiple: false do |index|
    index.as :symbol
  end

  property :section_title, predicate: ::RDF::Vocab::DC.relation do |index|
    index.as :stored_searchable, :facetable
  end

  property :sort_date, predicate: ::RDF::Vocab::DC.date, multiple: false do |index|
    index.as :stored_searchable, :facetable
  end
  validates :sort_date, format: { with: /\A\d\d\d\d-\d\d-\d\d\z/, message: "Your sort date must be in YYYY-MM-DD format", allow_blank: true }

  property :transcript, predicate: ::RDF::URI.new('http://fulcrum.org/ns#transcript'), multiple: false do |index|
    index.as :stored_searchable
  end

  property :translation, predicate: ::RDF::URI.new('http://fulcrum.org/ns#translation') do |index|
    index.as :stored_searchable
  end

  property :visual_descriptions, predicate: ::RDF::URI.new('http://fulcrum.org/ns#visual_descriptions') do |index|
    index.as :stored_searchable
  end

  # Depending on what "flavor" of file_set you are, this blob of json will have certain fields
  # See HELIO-2912
  property :extra_json_properties, predicate: ::RDF::URI.new('http://fulcrum.org/ns#ExtraJSONProperties'), multiple: false

  include HeliotropeUniversalMetadata
  include ::Hyrax::FileSetBehavior
  # This must come after the FileSetBehavior because it finalizes the metadata
  # schema (by adding accepts_nested_attributes)
  include ::Hyrax::BasicMetadata

  include HeliotropeMimeTypes

  self.indexer = ::FileSetIndexer

  after_create :after_create_jobs
  after_destroy :after_destroy_jobs

  # Cast to a SolrDocument by querying from Solr
  # Hyrax Heliotrope override: cast to an actual presenter, not just a solr_doc
  def to_presenter
    ::Hyrax::FileSetPresenter.new(CatalogController.new.fetch(id).last, nil)
  end

  private

    def after_create_jobs
      HandleCreateJob.perform_later(id)
    end

    def after_destroy_jobs
      HandleDeleteJob.perform_later(id)
    end
end
